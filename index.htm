<!-- Most of the code below is generated with the help of Google Gemini -->
<!DOCTYPE html>
<html lang="en" data-bs-theme="auto">

<head>
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<title>Character Picker</title>
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
	<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet" />
	<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet" />
	<link href="https://fonts.googleapis.com/css2?family=Fjalla+One&display=swap" rel="stylesheet">
	<link href="https://fonts.googleapis.com/css2?family=Special+Gothic+Condensed+One&display=swap" rel="stylesheet">
	<style>
		body {
			font-family: 'Inter', sans-serif;
			margin: 0;
			padding: 0;
		}

		.sticky-header {
			position: sticky;
			top: 0;
			z-index: 1030;
			background-color: rgba(var(--bs-body-bg-rgb), 0.7);
			box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
			width: 100%;
			padding: 1rem;
			backdrop-filter: blur(5px);
			-webkit-backdrop-filter: blur(5px);
		}

		.sticky-header h1 {
			font-family: 'Special Gothic Condensed One', sans-serif;
			/* Apply Special Gothic Condensed One font */
		}

		.theme-dropdown .btn {
			border: none;
			background: none;
		}

		.char-box {
			font-size: 1.8rem;
			width: 3rem;
			height: 3rem;
			display: flex;
			align-items: center;
			justify-content: center;
			cursor: pointer;
			border: 1px solid transparent;
			border-radius: 14px;
			font-family: 'Inter', 'Noto Sans', 'Segoe UI Symbol', 'Symbola', 'DejaVu Sans', 'Arial Unicode MS', sans-serif;
			position: relative;
			background-color: transparent;
		}

		.char-box:hover {
			box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
			outline: 1px solid rgba(var(--bs-body-color-rgb), 0.5);
			background-color: rgba(var(--bs-body-color-rgb), 0.08);
		}

		.char-box:active {
			box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
			outline: 1px solid rgba(var(--bs-body-color-rgb), 0.8);
			background-color: rgba(var(--bs-body-color-rgb), 0.15);
		}

		.char-box.success {
			background-color: var(--bs-success);
			color: white;
		}

		.char-box.success .char {
			opacity: 0;
			scale: 2;
		}

		.char-box.success .check {
			opacity: 1;
			scale: 1;
		}

		.char {
			scale: 1;
			transition: scale 0.1s ease;
		}

		.check {
			position: absolute;
			font-size: 1.5rem;
			opacity: 0;
			scale: 2;
			transition: scale 0.4s ease;
		}

		.char-grid {
			display: grid;
			grid-template-columns: repeat(auto-fill, minmax(3rem, 1fr));
			gap: 0.5rem;
			min-height: 70vh;
		}

		.input-group {
			position: sticky;
			top: 5.5rem;
			z-index: 1020;
			background-color: var(--bs-body-bg);
			transition: box-shadow 0.3s ease;
			box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
		}

		.input-group-text {
			background-color: var(--bs-secondary-bg);
		}

		.footer {
			display: flex;
			flex-direction: column;
			justify-content: center;
			align-items: center;
			text-align: center;
			margin-top: 2em;
			margin-bottom: 3em;
		}

		.back-to-top {
			position: fixed;
			bottom: 2rem;
			right: 2rem;
			z-index: 1040;
			opacity: 0;
			transform: scale(0);
			transition: all 0.3s ease;
			width: 3.5rem;
			height: 3.5rem;
			border-radius: 50%;
			border: none;
			display: flex;
			align-items: center;
			justify-content: center;
			font-size: 1.5rem;
			box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
			cursor: pointer;
			background-color: rgba(var(--bs-body-bg-rgb), 0.7);
			color: var(--bs-body-color);
			backdrop-filter: blur(5px);
			-webkit-backdrop-filter: blur(5px);
			outline: 1px solid rgba(var(--bs-body-color-rgb), 0.2);
			/* Added outline */
		}

		.back-to-top.show-btn {
			opacity: 1;
			transform: scale(1);
		}

		.back-to-top:hover {
			background-color: var(--bs-primary);
			color: white;
		}

		.back-to-top:active {
			background-color: var(--bs-primary-dark);
			/* A darker shade of primary if available, or define */
			color: white;
		}


		.loading-indicator {
			text-align: center;
			padding: 1rem;
			font-size: 1.2rem;
			color: var(--bs-secondary-color);
		}

		.toast-container {
			position: fixed;
			bottom: 0;
			left: 50%;
			transform: translateX(-50%) translateY(100%);
			z-index: 1050;
			padding: 1rem;
			transition: transform 0.3s ease-out;
			width: 100%;
			max-width: 350px;
			pointer-events: none;
		}

		.toast-container.show {
			transform: translateX(-50%) translateY(0);
		}

		.toast-message {
			background-color: rgba(var(--bs-body-bg-rgb), 0.85);
			color: var(--bs-body-color);
			padding: 1rem;
			border-radius: 0.5rem;
			box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
			display: flex;
			flex-direction: column;
			align-items: center;
			gap: 0.5rem;
			backdrop-filter: blur(8px);
			-webkit-backdrop-filter: blur(8px);
			font-size: 0.9rem;
			line-height: 1.4;
			text-align: center;
			transition: background-color 0.2s ease;
			border: 1px solid rgba(var(--bs-body-color-rgb), 0.1);
			position: relative;
			width: 100%;
			/* Removed cursor: pointer */
			pointer-events: auto;
		}

		.toast-message .icon {
			font-size: 1.5rem;
			color: var(--bs-success);
		}

		.toast-message .char-display {
			font-size: 2.5rem;
			font-weight: bold;
			line-height: 1;
		}

		.toast-message .details span {
			display: block;
			font-size: 0.85rem;
			color: var(--bs-secondary-color);
		}

		.toast-message .details strong {
			font-weight: bold;
			color: var(--bs-body-color);
		}

		.toast-message .details code {
			font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;
			background-color: rgba(var(--bs-body-color-rgb), 0.1);
			padding: 0.15em 0.3em;
			border-radius: 0.25rem;
			font-size: 0.8em;
		}

		.toast-message .details span:first-of-type {
			padding-top: 0.25rem;
		}

		#toastLlmButton,
		#toastCopyButton {
			font-size: 0.8rem;
			padding: 0.25rem 0.5rem;
			border-radius: 0.25rem;
			background-color: var(--bs-primary);
			color: white;
			border: none;
			cursor: pointer;
			box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
			transition: background-color 0.2s ease;
			pointer-events: auto;
		}

		#toastLlmButton:hover,
		#toastCopyButton:hover {
			background-color: #0a58ca;
			/* Darker shade of Bootstrap primary for hover */
		}

		.llm-modal-char {
			font-size: 4rem;
			font-weight: bold;
			margin-bottom: 0.5rem;
		}

		/* Centering the loading content */
		.llm-loading-container {
			text-align: center;
			padding: 2rem;
		}

		/* Modal Animation */
		.modal.fade .modal-dialog {
			transition: transform 0.3s ease-out, opacity 0.3s ease-out;
			transform: scale(0.8);
			opacity: 0;
			transform-origin: center;
		}

		.modal.fade.show .modal-dialog {
			transform: scale(1);
			opacity: 1;
		}

		/* LLM Modal Content Styling */
		#llmCharacterDetailsContent .llm-modal-char {
			text-align: center;
		}

		#llmCharacterDetailsContent h6 {
			text-align: center;
			margin-bottom: 1rem;
			/* Added margin-bottom here */
		}

		#llmDescriptionOutput p,
		#llmDescriptionOutput ul,
		#llmDescriptionOutput li {
			text-align: left;
		}

		/* Google Search Link styling */
		.modal-footer .btn-link {
			text-decoration: none;
		}

		.modal-footer .btn-link:hover {
			text-decoration: underline;
		}

		/* About Modal Specific Styling */
		#aboutModalContent h4 {
			text-align: center;
			font-weight: bold;
			margin-bottom: 1rem;
		}

		#aboutModalContent h5 {
			text-align: left;
			margin-top: 1.5rem;
			margin-bottom: 0.5rem;
		}

		#aboutModalContent ul {
			text-align: left;
			padding-left: 1.5rem;
		}

		#aboutModalContent p {
			text-align: left;
			margin-bottom: 0.5rem;
		}

		/* AI Tools Modal Specific Styling */
		#aiToolsModalContent h5 {
			text-align: center;
			font-weight: bold;
			margin-bottom: 1rem;
		}

		#aiToolsModalContent ul {
			text-align: left;
			padding-left: 1.5rem;
		}

		#aiToolsModalContent ul li {
			margin-bottom: 0.5rem;
		}

		/* Settings button now part of input-group-text */
		.input-group .input-group-text.settings-icon-wrapper {
			cursor: pointer;
			padding: 0.375rem 0.75rem;
			/* Match form-control padding */
			border-top-right-radius: var(--bs-border-radius);
			border-bottom-right-radius: var(--bs-border-radius);
			border-left: none;
			/* Remove left border to connect */
		}

		.input-group .input-group-text.settings-icon-wrapper:hover {
			background-color: var(--bs-tertiary-bg);
			/* Lighter shade for hover */
			border-color: var(--bs-border-color);
			/* Keep border color consistent */
		}

		/* Password toggle icon within input-group */
		.input-group .input-group-text.password-toggle {
			cursor: pointer;
			color: var(--bs-secondary-color);
			display: flex;
			align-items: center;
			justify-content: center;
		}

		/* No results message styling */
		.no-results-message {
			text-align: center;
			margin-top: 5rem;
			/* Increased margin from search bar */
			margin-bottom: 5rem;
			/* Increased margin from footer */
		}

		.no-results-message i {
			margin-bottom: 1rem;
			/* Margin for icon */
		}

		@media (max-width: 767.98px) {
			.toast-message .fw-bold {
				display: none;
				/* Hide "Copied!" text on mobile */
			}

			.toast-message #toastLlmButton,
			.toast-message #toastCopyButton {
				padding: 0.5rem 1rem;
				/* Increase padding for easier tap */
				font-size: 0.9rem;
				/* Slightly larger font */
				margin-top: 0;
				/* Remove margin-top to align buttons */
			}
		}

		/* Custom Loader CSS */
		.loader {
			font-size: 10px;
			width: 1em;
			height: 1em;
			border-radius: 50%;
			position: relative;
			text-indent: -9999em;
			animation: mulShdSpin 1.1s infinite ease;
			transform: translateZ(0);
			color: var(--bs-text-light); /* Use primary color for the loader */
			display: block; /* Make it a block element for margin: auto */
			margin: 2rem auto; /* Center and add vertical margins */
      margin-top: 2rem;
      margin-bottom: 3rem !important;
		}

		@keyframes mulShdSpin {
			0%,
			100% {
				box-shadow: 0em -2.6em 0em 0em currentColor, 1.8em -1.8em 0 0em rgba(var(--bs-body-color-rgb), 0.2), 2.5em 0em 0 0em rgba(var(--bs-body-color-rgb), 0.2), 1.75em 1.75em 0 0em rgba(var(--bs-body-color-rgb), 0.2), 0em 2.5em 0 0em rgba(var(--bs-body-color-rgb), 0.2), -1.8em 1.8em 0 0em rgba(var(--bs-body-color-rgb), 0.2), -2.6em 0em 0 0em rgba(var(--bs-body-color-rgb), 0.5), -1.8em -1.8em 0 0em rgba(var(--bs-body-color-rgb), 0.7);
			}
			12.5% {
				box-shadow: 0em -2.6em 0em 0em rgba(var(--bs-body-color-rgb), 0.7), 1.8em -1.8em 0 0em currentColor, 2.5em 0em 0 0em rgba(var(--bs-body-color-rgb), 0.2), 1.75em 1.75em 0 0em rgba(var(--bs-body-color-rgb), 0.2), 0em 2.5em 0 0em rgba(var(--bs-body-color-rgb), 0.2), -1.8em 1.8em 0 0em rgba(var(--bs-body-color-rgb), 0.2), -2.6em 0em 0 0em rgba(var(--bs-body-color-rgb), 0.2), -1.8em -1.8em 0 0em rgba(var(--bs-body-color-rgb), 0.5);
			}
			25% {
				box-shadow: 0em -2.6em 0em 0em rgba(var(--bs-body-color-rgb), 0.5), 1.8em -1.8em 0 0em rgba(var(--bs-body-color-rgb), 0.7), 2.5em 0em 0 0em currentColor, 1.75em 1.75em 0 0em rgba(var(--bs-body-color-rgb), 0.2), 0em 2.5em 0 0em rgba(var(--bs-body-color-rgb), 0.2), -1.8em 1.8em 0 0em rgba(var(--bs-body-color-rgb), 0.2), -2.6em 0em 0 0em rgba(var(--bs-body-color-rgb), 0.2), -1.8em -1.8em 0 0em rgba(var(--bs-body-color-rgb), 0.2);
			}
			37.5% {
				box-shadow: 0em -2.6em 0em 0em rgba(var(--bs-body-color-rgb), 0.2), 1.8em -1.8em 0 0em rgba(var(--bs-body-color-rgb), 0.5), 2.5em 0em 0 0em rgba(var(--bs-body-color-rgb), 0.7), 1.75em 1.75em 0 0em currentColor, 0em 2.5em 0 0em rgba(var(--bs-body-color-rgb), 0.2), -1.8em 1.8em 0 0em rgba(var(--bs-body-color-rgb), 0.2), -2.6em 0em 0 0em rgba(var(--bs-body-color-rgb), 0.2), -1.8em -1.8em 0 0em rgba(var(--bs-body-color-rgb), 0.2);
			}
			50% {
				box-shadow: 0em -2.6em 0em 0em rgba(var(--bs-body-color-rgb), 0.2), 1.8em -1.8em 0 0em rgba(var(--bs-body-color-rgb), 0.2), 2.5em 0em 0 0em rgba(var(--bs-body-color-rgb), 0.5), 1.75em 1.75em 0 0em rgba(var(--bs-body-color-rgb), 0.7), 0em 2.5em 0 0em currentColor, -1.8em 1.8em 0 0em rgba(var(--bs-body-color-rgb), 0.2), -2.6em 0em 0 0em rgba(var(--bs-body-color-rgb), 0.2), -1.8em -1.8em 0 0em rgba(var(--bs-body-color-rgb), 0.2);
			}
			62.5% {
				box-shadow: 0em -2.6em 0em 0em rgba(var(--bs-body-color-rgb), 0.2), 1.8em -1.8em 0 0em rgba(var(--bs-body-color-rgb), 0.2), 2.5em 0em 0 0em rgba(var(--bs-body-color-rgb), 0.2), 1.75em 1.75em 0 0em rgba(var(--bs-body-color-rgb), 0.5), 0em 2.5em 0 0em rgba(var(--bs-body-color-rgb), 0.7), -1.8em 1.8em 0 0em currentColor, -2.6em 0em 0 0em rgba(var(--bs-body-color-rgb), 0.2), -1.8em -1.8em 0 0em rgba(var(--bs-body-color-rgb), 0.2);
			}
			75% {
				box-shadow: 0em -2.6em 0em 0em rgba(var(--bs-body-color-rgb), 0.2), 1.8em -1.8em 0 0em rgba(var(--bs-body-color-rgb), 0.2), 2.5em 0em 0 0em rgba(var(--bs-body-color-rgb), 0.2), 1.75em 1.75em 0 0em rgba(var(--bs-body-color-rgb), 0.2), 0em 2.5em 0 0em rgba(var(--bs-body-color-rgb), 0.5), -1.8em 1.8em 0 0em rgba(var(--bs-body-color-rgb), 0.7), -2.6em 0em 0 0em currentColor, -1.8em -1.8em 0 0em rgba(var(--bs-body-color-rgb), 0.2);
			}
			87.5% {
				box-shadow: 0em -2.6em 0em 0em rgba(var(--bs-body-color-rgb), 0.2), 1.8em -1.8em 0 0em rgba(var(--bs-body-color-rgb), 0.2), 2.5em 0em 0 0em rgba(var(--bs-body-color-rgb), 0.2), 1.75em 1.75em 0 0em rgba(var(--bs-body-color-rgb), 0.2), 0em 2.5em 0 0em rgba(var(--bs-body-color-rgb), 0.2), -1.8em 1.8em 0 0em rgba(var(--bs-body-color-rgb), 0.5), -2.6em 0em 0 0em rgba(var(--bs-body-color-rgb), 0.7), -1.8em -1.8em 0 0em currentColor;
			}
		}
	</style>
</head>

<body>
	<div class="sticky-header d-flex align-items-center container-fluid">
		<h1 class="h4 fw-bold m-0">Character Picker</h1>
		<div class="ms-auto d-flex align-items-center">
			<!-- About Button -->
			<button class="btn btn-link text-decoration-none" type="button" data-bs-toggle="modal" data-bs-target="#aboutModal">
				<i class="bi bi-info-circle me-1"></i> <span class="d-none d-md-inline">About</span>
			</button>

			<div class="vr mx-2"></div> <!-- Separator -->

			<div class="dropdown theme-dropdown">
				<button class="btn dropdown-toggle" type="button" data-bs-toggle="dropdown" title="Change theme" id="themeDropdownButton">
					<i class="bi bi-moon-stars-fill me-1"></i> <span id="currentThemeLabel">Theme</span>
				</button>
				<ul class="dropdown-menu dropdown-menu-end shadow">
					<li><a class="dropdown-item" href="#" data-theme="dark">Dark Theme</a></li>
					<li><a class="dropdown-item" href="#" data-theme="light">Light Theme</a></li>
					<li><a class="dropdown-item" href="#" data-theme="auto">System Default</a></li>
				</ul>
			</div>
		</div>
	</div>

	<main class="container mt-3">
		<div class="input-group mb-3">
			<span class="input-group-text"><i class="bi bi-search"></i></span>
			<input type="text" id="search" class="form-control" placeholder="Search characters by name..." autocomplete="off" autocorrect="off" autocapitalize="off">
			<span class="input-group-text settings-icon-wrapper" role="button" data-bs-toggle="modal" data-bs-target="#settingsModal" title="Settings">
				<i class="bi bi-gear-fill"></i>
			</span>
		</div>

		<div id="charGrid" class="char-grid"></div>
		<div id="loadingIndicator" class="loading-indicator d-none">Loading more characters...</div>

		<!-- No Characters Found Message -->
		<div id="noResultsMessage" class="no-results-message d-none">
			<i class="bi bi-search-heart mb-3 display-4 text-muted"></i>
			<p class="h5 text-muted">No characters found.</p>
		</div>

		<hr>
		<small class="footer">
			<div>
				Made by <a href="https://github.com/theonlyasdk" target="_blank" class="text-decoration-none" title="Visit theonlyasdk's GitHub profile">theonlyasdk</a> with the help of <a href="#" id="aiToolsLink" class="text-decoration-none" data-bs-toggle="modal" data-bs-target="#aiToolsModal" title="Learn about the AI tools used">AI</a>
			</div>
			<div>
				View on <a href="https://github.com/theonlyasdk/character-picker" target="_blank" title="View this project on GitHub"><i class="bi bi-github"></i> GitHub</a>
			</div>
		</small>
	</main>

	<a href="#" class="back-to-top" title="Back to Top">
		<i class="bi bi-arrow-up"></i>
	</a>

	<!-- Toast Notification -->
	<div id="copyToast" class="toast-container">
		<div class="toast-message">
			<span class="fw-bold d-md-inline">Copied!</span>
			<span id="toastChar" class="char-display"></span>
			<div class="details">
				<span><strong>Code point:</strong> <code id="toastCodepoint"></code></span>
				<span id="toastNameContainer"><strong>Name:</strong> <code id="toastName"></code></span>
			</div>
			<div class="d-flex justify-content-center mt-2">
				<button id="toastLlmButton" class="btn btn-primary btn-sm" title="Get AI-generated character details"><i class="bi bi-stars"></i> Details</button>
				<button id="toastCopyButton" class="btn btn-primary btn-sm d-inline d-md-none ms-2" title="Copy character"><i class="bi bi-clipboard"></i> Copy</button>
			</div>
		</div>
	</div>

	<!-- LLM Description Modal -->
	<div class="modal fade" id="llmDescriptionModal" tabindex="-1" aria-labelledby="llmDescriptionModalLabel" aria-hidden="true">
		<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="llmDescriptionModalLabel"><i class="bi bi-info-circle me-2"></i>Character Details</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<!-- Loading content container -->
					<div id="llmLoadingContainer" class="llm-loading-container">
						<div class="loader">Loading...</div>
						<p class="mt-2">Generating a summary about <strong id="loadingCharName"></strong>... Please be patient!</p>
					</div>
					<!-- Character details content container -->
					<div id="llmCharacterDetailsContent" style="display: none;">
						<div class="llm-modal-char"></div>
						<h6 class="fw-bold"></h6>
						<div id="llmDescriptionOutput"></div>
						<!-- Specific ID for LLM text -->
					</div>
				</div>
				<div class="modal-footer d-flex justify-content-between align-items-center">
					<a id="googleSearchLink" href="#" target="_blank" class="btn btn-link">
						<i class="bi bi-search me-1"></i> Search on Google
					</a>
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
				</div>
			</div>
		</div>
	</div>

	<!-- About Modal -->
	<div class="modal fade" id="aboutModal" tabindex="-1" aria-labelledby="aboutModalLabel" aria-hidden="true">
		<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="aboutModalLabel"><i class="bi bi-info-circle me-2"></i>About</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<div id="aboutModalContent">
						<h4 class="text-center fw-bold">An easy to use character picker!</h4>

						<h5>Features</h5>
						<ul>
							<li>Find the character you're looking for easily - Just type the name of the character you want to search for!</li>
							<li>Get an AI summary of the character with a simple click!</li>
						</ul>

						<h5>Use of generative AI</h5>
						<p>This is one of my first projects that I made <i>(almost)</i> entirely with the help of AI tools like <strong>ChatGPT</strong>, <strong>Google Gemini</strong> and <strong>GitHub Copilot</strong>.</p>

						<p>Most of the code in this project is written by AI, though I did make some minor changes myself as I was too lazy to prompt the AI and also because it's easier for me to write code than write a detailed prompt for what I want to modify in words 😅</p>
					</div>
				</div>
				<div class="modal-footer d-flex justify-content-between">
					<a id="googleSearchLink" href="https://github.com/theonlyasdk/character-picker" target="_blank" class="btn btn-link">
						<i class="bi bi-github me-1"></i> View on GitHub
					</a>
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
				</div>
			</div>
		</div>
	</div>

	<!-- AI Tools Modal -->
	<div class="modal fade" id="aiToolsModal" tabindex="-1" aria-labelledby="aiToolsModalLabel" aria-hidden="true">
		<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="aiToolsModalLabel"><i class="bi bi-tools me-2"></i>AI Tools</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<div id="aiToolsModalContent">
						<h5 class="text-center fw-bold mb-3">AI Tools Used</h5>
						<ul>
							<li><a href="https://gemini.google.com/" target="_blank">Google Gemini</a></li>
							<li><a href="https://chatgpt.com/" target="_blank">ChatGPT</a></li>
							<li><a href="https://copilot.github.com/" target="_blank">GitHub Copilot</a></li>
						</ul>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
				</div>
			</div>
		</div>
	</div>

	<!-- Settings Modal -->
	<div class="modal fade" id="settingsModal" tabindex="-1" aria-labelledby="settingsModalLabel" aria-hidden="true">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="settingsModalLabel"><i class="bi bi-gear me-2"></i>Settings</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<div class="mb-3">
						<label for="geminiApiKey" class="form-label">Gemini API Key</label>
						<div class="input-group">
							<input type="password" class="form-control" id="geminiApiKey" placeholder="Enter your Gemini API Key">
							<span class="input-group-text password-toggle" id="togglePassword" title="Show password">
								<i class="bi bi-eye-fill"></i>
							</span>
						</div>
						<div class="form-text">
							Your API key is saved locally in your browser.
						</div>
					</div>
				</div>
				<div class="modal-footer d-flex justify-content-between">
					<a href="https://aistudio.google.com/app/apikey" target="_blank" class="btn btn-link">
						<i class="bi bi-box-arrow-up-right"></i>&nbsp;Get API Key from Google AI Studio
					</a>
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
				</div>
			</div>
		</div>
	</div>


	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
	<script>
		const html = document.documentElement;
		const charGrid = document.getElementById('charGrid');
		const searchInput = document.getElementById('search');
		const loadingIndicator = document.getElementById('loadingIndicator');
		const themeDropdownButton = document.getElementById('themeDropdownButton');
		const currentThemeLabel = document.getElementById('currentThemeLabel');
		const copyToast = document.getElementById('copyToast');
		const toastMessage = document.querySelector('#copyToast .toast-message');
		const toastChar = document.getElementById('toastChar');
		const toastName = document.getElementById('toastName');
		const toastCodepoint = document.getElementById('toastCodepoint');
		const toastNameContainer = document.getElementById('toastNameContainer');
		const toastLlmButton = document.getElementById('toastLlmButton');
		const googleSearchLink = document.getElementById('googleSearchLink');
		const aiToolsLink = document.getElementById('aiToolsLink');

		const llmDescriptionModal = new bootstrap.Modal(document.getElementById('llmDescriptionModal'));
		const llmLoadingContainer = document.getElementById('llmLoadingContainer');
		const llmCharacterDetailsContent = document.getElementById('llmCharacterDetailsContent');
		const llmDescriptionOutput = document.getElementById('llmDescriptionOutput');
		const aiToolsModal = new bootstrap.Modal(document.getElementById('aiToolsModal'));
		const loadingCharName = document.getElementById('loadingCharName'); // New element for loading text

		// Settings Modal Elements
		const settingsModal = new bootstrap.Modal(document.getElementById('settingsModal'));
		const geminiApiKeyInput = document.getElementById('geminiApiKey');
		const togglePasswordButton = document.getElementById('togglePassword');
		const toastCopyButton = document.getElementById('toastCopyButton');


		const unicodeStart = 0x0020;
		const unicodeEnd = 0x2BFF;
		const characters = [];

		const CHARACTERS_PER_PAGE = 200;
		let currentPage = 0;
		let filteredCharacters = [];
		let isLoadingMore = false;
		let intersectionObserver;
		let toastTimeoutId;

		let currentToastChar = '';
		let currentToastMappedName = '';

		const characterMap = {
			"capital omega": [0x03A9],
			"small omega": [0x03C9],
			"capital phi": [0x03A6],
			"small phi": [0x03C6],
			"capital pi": [0x03A0],
			"small pi": [0x03C0],
			"integral": [0x222B],
			"double integral": [0x222C],
			"triple integral": [0x222D],
			"contour integral": [0x222E],
			"surface integral": [0x222F],
			"volume integral": [0x2230],
			"clockwise integral": [0x2231],
			"clockwise contour integral": [0x2232],
			"anticlockwise contour integral": [0x2233],
			"infinity": [0x221E],
			"capital delta": [0x0394],
			"small delta": [0x03B4],
			"capital sigma": [0x03A3],
			"small sigma": [0x03C3],
			"final small sigma": [0x03C2],
			"capital mu": [0x039C],
			"small mu": [0x03BC],
			"capital epsilon": [0x0395],
			"small epsilon": [0x03B5],
			"variant small epsilon": [0x03F5],
			"capital lambda": [0x039B],
			"small lambda": [0x03BB],
			"capital alpha": [0x0391],
			"small alpha": [0x03B1],
			"capital beta": [0x0392],
			"small beta": [0x03B2],
			"capital gamma": [0x0393],
			"small gamma": [0x03B3],
			"capital theta": [0x0398],
			"small theta": [0x03B8],
			"variant capital theta": [0x03D1],
			"capital omicron": [0x039F],
			"small omicron": [0x03BF],
			"capital zeta": [0x0396],
			"small zeta": [0x03B6],
			"capital eta": [0x0397],
			"small eta": [0x03B7],
			"capital iota": [0x0399],
			"small iota": [0x03B9],
			"capital kappa": [0x039A],
			"small kappa": [0x03BA],
			"capital nu": [0x039D],
			"small nu": [0x03BD],
			"capital xi": [0x039E],
			"small xi": [0x03BE],
			"capital rho": [0x03A1],
			"small rho": [0x03C1],
			"capital tau": [0x03A4],
			"small tau": [0x03C4],
			"capital upsilon": [0x03A5],
			"small upsilon": [0x03C5],
			"capital chi": [0x03A7],
			"small chi": [0x03C7],
			"capital psi": [0x03A8],
			"small psi": [0x03C8],
			"nabla": [0x2207],
			"approximately equal to": [0x2248],
			"almost equal to": [0x2245],
			"not equal to": [0x2260],
			"less than or equal to": [0x2264],
			"greater than or equal to": [0x2265],
			"square root": [0x221A],
			"celsius degree": [0x2103],
			"fahrenheit degree": [0x2109],
			"degree sign": [0x00B0],
			"euro sign": [0x20AC],
			"copyright sign": [0x00A9],
			"registered sign": [0x00AE],
			"trade mark sign": [0x2122],
			"bullet": [0x2022],
			"black star": [0x2605],
			"white star": [0x2606],
			"medium black star": [0x2B50],
			"four teardrop-spoked asterisk": [0x272F],
			"six pointed black star": [0x2736],
			"black heart suit": [0x2665],
			"heavy black heart": [0x2764],
			"rightwards arrow": [0x2192],
			"long rightwards arrow": [0x27F6],
			"rightwards double arrow": [0x21D2],
			"rightwards arrow to bar": [0x21E2],
			"leftwards arrow": [0x2190],
			"long leftwards arrow": [0x27F5],
			"leftwards double arrow": [0x21D0],
			"leftwards arrow to bar": [0x21E0],
			"upwards arrow": [0x2191],
			"upwards double arrow": [0x21D1],
			"upwards arrow to bar": [0x21E1],
			"downwards arrow": [0x2193],
			"downwards double arrow": [0x21D3],
			"downwards arrow to bar": [0x21E3],
			"checkmark": [0x2713],
			"white heavy check mark": [0x2705],
			"cross mark": [0x2717],
			"cross mark button": [0x274C],
			"infinity symbol": [0x221E],
			"section sign": [0x00A7],
			"paragraph sign": [0x00B6],
			"n-ary summation": [0x2211],
			"n-ary product": [0x220F],
			"subset of": [0x2282],
			"subset of or equal to": [0x2286],
			"superset of": [0x2283],
			"superset of or equal to": [0x2287],
			"empty set": [0x2205],
			"for all": [0x2200],
			"there exists": [0x2203],
			"element of": [0x2208],
			"not an element of": [0x2209],
			"union": [0x222A],
			"intersection": [0x2229],
			"logical and": [0x2227],
			"logical or": [0x2228],
			"not sign": [0x00AC],
			"therefore": [0x2234],
			"because": [0x2235],
			"perpendicular": [0x22A5],
			"parallel": [0x2225],
			"angle": [0x2220],
			"identically equal to": [0x2261],
			"plus minus sign": [0x00B1],
			"multiplication sign": [0x00D7],
			"division sign": [0x00F7],
			"fraction slash": [0x2044],
			"superscript one": [0x00B9],
			"superscript two": [0x00B2],
			"superscript three": [0x00B3],
			"cent sign": [0x00A2],
			"pound sign": [0x00A3],
			"yen sign": [0x00A5],
			"currency sign": [0x00A4],
			"broken bar": [0x00A6],
			"diaeresis": [0x00A8],
			"macron": [0x00AF],
			"cedilla": [0x00B8],
			"vulgar fraction one quarter": [0x00BC],
			"vulgar fraction one half": [0x00BD],
			"vulgar fraction three quarters": [0x00BE],
			"inverted question mark": [0x00BF],
			"inverted exclamation mark": [0x00A1],
			"latin capital letter a with acute": [0x00C1],
			"latin capital letter a with grave": [0x00C0],
			"latin capital letter a with circumflex": [0x00C2],
			"latin capital letter a with tilde": [0x00C3],
			"latin capital letter a with diaeresis": [0x00C4],
			"latin capital letter a with ring above": [0x00C5],
			"latin capital letter ae": [0x00C6],
			"latin capital letter c with cedilla": [0x00C7],
			"latin capital letter e with acute": [0x00C9],
			"latin capital letter e with grave": [0x00C8],
			"latin capital letter e with circumflex": [0x00CA],
			"latin capital letter e with diaeresis": [0x00CB],
			"latin capital letter i with acute": [0x00CD],
			"latin capital letter i with grave": [0x00CC],
			"latin capital letter i with circumflex": [0x00CE],
			"latin capital letter i with diaeresis": [0x00CF],
			"latin capital letter eth": [0x00D0],
			"latin capital letter n with tilde": [0x00D1],
			"latin capital letter o with acute": [0x00D3],
			"latin capital letter o with grave": [0x00D2],
			"latin capital letter o with circumflex": [0x00D4],
			"latin capital letter o with tilde": [0x00D5],
			"latin capital letter o with diaeresis": [0x00D6],
			"latin capital letter o with stroke": [0x00D8],
			"latin capital letter u with acute": [0x00DA],
			"latin capital letter u with grave": [0x00D9],
			"latin capital letter u with circumflex": [0x00DB],
			"latin capital letter u with diaeresis": [0x00DC],
			"latin capital letter y with acute": [0x00DD],
			"latin capital letter thorn": [0x00DE],
			"latin small letter sharp s": [0x00DF],
			"latin small letter a with grave": [0x00E0],
			"latin small letter a with acute": [0x00E1],
			"latin small letter a with circumflex": [0x00E2],
			"latin small letter a with tilde": [0x00E3],
			"latin small letter a with diaeresis": [0x00E4],
			"latin small letter a with ring above": [0x00E5],
			"latin small letter ae": [0x00E6],
			"latin small letter c with cedilla": [0x00E7],
			"latin small letter e with grave": [0x00E8],
			"latin small letter e with acute": [0x00E9],
			"latin small letter e with circumflex": [0x00EA],
			"latin small letter e with diaeresis": [0x00EB],
			"latin small letter i with grave": [0x00EC],
			"latin small letter i with acute": [0x00ED],
			"latin small letter i with circumflex": [0x00EE],
			"latin small letter i with diaeresis": [0x00EF],
			"latin small letter eth": [0x00F0],
			"latin small letter n with tilde": [0x00F1],
			"latin small letter o with grave": [0x00F2],
			"latin small letter o with acute": [0x00F3],
			"latin small letter o with circumflex": [0x00F4],
			"latin small letter o with tilde": [0x00F5],
			"latin small letter o with diaeresis": [0x00F6],
			"latin small letter o with stroke": [0x00F8],
			"latin small letter u with grave": [0x00F9],
			"latin small letter u with acute": [0x00FA],
			"latin small letter u with circumflex": [0x00FB],
			"latin small letter u with diaeresis": [0x00FC],
			"latin small letter y with acute": [0x00FD],
			"latin small letter thorn": [0x00FE],
			"latin small letter y with diaeresis": [0x00FF],
		};

		const backToTopBtn = document.querySelector('.back-to-top');

		window.addEventListener('scroll', () => {
			if (window.scrollY > 300) {
				backToTopBtn.classList.add('show-btn');
			} else {
				backToTopBtn.classList.remove('show-btn');
			}
		});

		backToTopBtn.addEventListener('click', (e) => {
			e.preventDefault();
			window.scrollTo({
				top: 0,
				behavior: 'smooth'
			});
		});

		function showToast(char, unicodeName, codepoint, mappedName) {
			clearTimeout(toastTimeoutId);
			toastChar.textContent = char;
			toastCodepoint.textContent = codepoint;

			currentToastChar = char;
			currentToastMappedName = mappedName || unicodeName;

			if (mappedName && mappedName.toLowerCase() !== unicodeName.toLowerCase()) {
				toastName.textContent = mappedName;
				toastNameContainer.style.display = 'block';
			} else {
				toastNameContainer.style.display = 'none';
			}

			copyToast.classList.add('show');

			toastTimeoutId = setTimeout(() => {
				copyToast.classList.remove('show');
			}, 5000);
		}

		function copyText(text, unicodeName, codepoint, mappedName, shouldShowToast = true) {
			if (navigator.clipboard && navigator.clipboard.writeText) {
				navigator.clipboard.writeText(text).then(() => {
					if (shouldShowToast) showToast(text, unicodeName, codepoint, mappedName);
				}).catch(err => {
					fallbackCopyTextInternal(text, unicodeName, codepoint, mappedName, shouldShowToast);
				});
			} else {
				fallbackCopyTextInternal(text, unicodeName, codepoint, mappedName, shouldShowToast);
			}
		}

		function fallbackCopyTextInternal(text, unicodeName, codepoint, mappedName, shouldShowToast) {
			const textarea = document.createElement('textarea');
			textarea.value = text;
			textarea.style.position = 'fixed';
			textarea.style.top = '0';
			textarea.style.left = '0';
			textarea.style.width = '1px';
			textarea.style.height = '1px';
			textarea.style.padding = '0';
			textarea.style.border = 'none';
			textarea.style.outline = 'none';
			textarea.style.boxShadow = 'none';
			textarea.style.background = 'transparent';
			document.body.appendChild(textarea);
			textarea.focus();
			textarea.select();
			try {
				document.execCommand('copy');
				if (shouldShowToast) showToast(text, unicodeName, codepoint, mappedName);
			} catch (err) {
				console.error('Fallback copy method failed:', err);
			}
			document.body.removeChild(textarea);
		}

		function getUnicodeName(code) {
			try {
				return String.fromCodePoint(code).normalize("NFC").toUpperCase() + ' - U+' + code.toString(16).toUpperCase().padStart(4, '0');
			} catch {
				return 'U+' + code.toString(16).toUpperCase();
			}
		}

		let isScrolling = false;
		let touchStartX = 0;
		let touchStartY = 0;

		async function getCharacterDescription(char, name) {
			// Show loading container and hide content container
			llmLoadingContainer.style.display = 'block';
			llmCharacterDetailsContent.style.display = 'none';
			llmDescriptionModal.show();

			// Set the character name in the loading message
			loadingCharName.textContent = char;

			const apiKey = localStorage.getItem('gemini.api-key');

			if (!apiKey) {
				llmLoadingContainer.innerHTML = `
					<div class="alert alert-warning" role="alert">
						<i class="bi bi-exclamation-triangle-fill me-2"></i>
						<strong>API Key Missing!</strong> Please enter your Gemini API Key in the <a href="#" data-bs-toggle="modal" data-bs-target="#settingsModal">Settings</a> to use this feature.
					</div>
				`;
				return;
			}

			let chatHistory = [];
			const prompt = `Provide a concise and informative description for the Unicode character "${char}" (Unicode name: "${name}"). Include its common uses, historical context, or mathematical/scientific significance if applicable. Format the response strictly as HTML, using paragraphs (<p>), bold (<strong>), unordered lists (<ul>, <li>), and optionally <img> tags for illustrations where appropriate. Do NOT use Markdown. Keep the response to a maximum of 200 words.`;
			chatHistory.push({
				role: "user",
				parts: [{
					text: prompt
				}]
			});

			const payload = {
				contents: chatHistory
			};
			const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

			let attempts = 0;
			const maxAttempts = 5;
			let delay = 1000;

			while (attempts < maxAttempts) {
				try {
					const response = await fetch(apiUrl, {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json'
						},
						body: JSON.stringify(payload)
					});

					if (response.ok) {
						const result = await response.json();
						if (result.candidates && result.candidates.length > 0 &&
							result.candidates[0].content && result.candidates[0].content.parts &&
							result.candidates[0].content.parts.length > 0) {
							const text = result.candidates[0].content.parts[0].text;

							// Populate the content container
							llmCharacterDetailsContent.querySelector('.llm-modal-char').textContent = char;
							llmCharacterDetailsContent.querySelector('h6').textContent = name;
							llmDescriptionOutput.innerHTML = text; // Populate the specific output div

							// Hide loading and show content
							llmLoadingContainer.style.display = 'none';
							llmCharacterDetailsContent.style.display = 'block';

							// Update Google Search link
							googleSearchLink.href = `https://www.google.com/search?q=${encodeURIComponent(char + " unicode " + name)}`;
							return;
						} else {
							llmLoadingContainer.innerHTML = `
								<div class="alert alert-danger" role="alert">
									<i class="bi bi-exclamation-octagon-fill me-2"></i>
									<strong>Error:</strong> Could not retrieve description. Unexpected API response structure.
								</div>
								<pre><code>${JSON.stringify(result, null, 2)}</code></pre>
							`;
							llmLoadingContainer.style.display = 'block';
							llmCharacterDetailsContent.style.display = 'none';
							return;
						}
					} else {
						const errorBody = await response.json();
						llmLoadingContainer.innerHTML = `
							<div class="alert alert-danger" role="alert">
								<i class="bi bi-exclamation-octagon-fill me-2"></i>
								<strong>API Error:</strong> ${response.status} ${response.statusText}
							</div>
							<pre><code>${JSON.stringify(errorBody, null, 2)}</code></pre>
						`;
						llmLoadingContainer.style.display = 'block';
						llmCharacterDetailsContent.style.display = 'none';

						if (response.status === 429) {
							attempts++;
							if (attempts < maxAttempts) {
								await new Promise(res => setTimeout(res, delay));
								delay *= 2;
							} else {
								// Max retries reached, display final error.
								return;
							}
						} else {
							// Non-retryable error, stop trying.
							return;
						}
					}
				} catch (error) {
					llmLoadingContainer.innerHTML = `
						<div class="alert alert-danger" role="alert">
							<i class="bi bi-exclamation-octagon-fill me-2"></i>
							<strong>Network Error:</strong> ${error.message}
						</div>
					`;
					llmLoadingContainer.style.display = 'block';
					llmCharacterDetailsContent.style.display = 'none';
					return;
				}
			}
		}


		function renderCharacters(filter = '', append = false) {
			const noResultsMessage = document.getElementById('noResultsMessage'); // Get the element here

			if (!append) {
				charGrid.innerHTML = '';
				currentPage = 0;
				if (intersectionObserver) {
					intersectionObserver.disconnect();
				}

				const lowerCaseFilter = filter.toLowerCase();
				const tempFilteredCharacters = new Map();

				for (const key in characterMap) {
					if (lowerCaseFilter.includes("integral") && key.includes("integral")) {
						characterMap[key].forEach(code => {
							const charObj = characters.find(c => c.code === code);
							if (charObj && !tempFilteredCharacters.has(code)) {
								tempFilteredCharacters.set(code, {
									charObj: charObj,
									mappedName: key
								});
							}
						});
					} else if (key.includes(lowerCaseFilter)) {
						characterMap[key].forEach(code => {
							const charObj = characters.find(c => c.code === code);
							if (charObj && !tempFilteredCharacters.has(code)) {
								tempFilteredCharacters.set(code, {
									charObj: charObj,
									mappedName: key
								});
							}
						});
					}
				}

				characters.forEach(c => {
					if (c.name.toLowerCase().includes(lowerCaseFilter) && !tempFilteredCharacters.has(c.code)) {
						tempFilteredCharacters.set(c.code, {
							charObj: c,
							mappedName: null
						});
					}
				});

				filteredCharacters = Array.from(tempFilteredCharacters.values());
			}

			const startIndex = currentPage * CHARACTERS_PER_PAGE;
			const endIndex = startIndex + CHARACTERS_PER_PAGE;
			const charactersToRender = filteredCharacters.slice(startIndex, endIndex);

			if (filteredCharacters.length === 0 && !append) { // Only show if no results and not appending
				charGrid.style.display = 'none';
				loadingIndicator.classList.add('d-none');
				noResultsMessage.classList.remove('d-none');
			} else if (charactersToRender.length > 0) {
				charGrid.style.display = 'grid'; // Ensure grid is visible if there are results
				noResultsMessage.classList.add('d-none'); // Hide no results message
			}


			charactersToRender.forEach(item => {
				const c = item.charObj;
				const displayTitle = item.mappedName ? `${item.mappedName} (${c.name})` : c.name;

				const div = document.createElement('div');
				div.className = 'char-box';
				div.title = displayTitle + "\n(Click to copy)";

				const spanChar = document.createElement('span');
				spanChar.className = 'char';
				spanChar.textContent = c.char;

				const spanCheck = document.createElement('span');
				spanCheck.classList.add("bi", "bi-check", "check");

				div.appendChild(spanChar);
				div.appendChild(spanCheck);

				const onClickHandler = () => {
					if (!isScrolling) {
						if (window.innerWidth >= 768) { // Desktop - click to copy
							copyText(c.char, c.name, `U+${c.code.toString(16).toUpperCase().padStart(4, '0')}`, item.mappedName, true);
						} else { // Mobile - only show toast, don't copy yet
							showToast(c.char, c.name, `U+${c.code.toString(16).toUpperCase().padStart(4, '0')}`, item.mappedName);
						}
						div.classList.add('success');
						setTimeout(() => {
							div.classList.remove('success');
						}, 1000);
					}
					isScrolling = false;
				}

				div.addEventListener("click", onClickHandler);
				div.addEventListener("touchstart", (e) => {
					touchStartX = e.touches[0].clientX;
					touchStartY = e.touches[0].clientY;
					isScrolling = false;
				});
				div.addEventListener("touchmove", (e) => {
					const touchEndX = e.touches[0].clientX;
					const touchEndY = e.touches[0].clientY;
					const dx = Math.abs(touchEndX - touchStartX);
					const dy = Math.abs(touchEndY - touchStartY);
					if (dx > 10 || dy > 10) {
						isScrolling = true;
					}
				});
				div.addEventListener("touchend", onClickHandler);

				charGrid.appendChild(div);
			});

			if (endIndex < filteredCharacters.length) {
				if (intersectionObserver) {
					intersectionObserver.disconnect();
				}
				const sentinel = document.createElement('div');
				sentinel.id = 'sentinel';
				sentinel.style.height = '1px';
				charGrid.appendChild(sentinel);

				intersectionObserver = new IntersectionObserver((entries) => {
					if (entries[0].isIntersecting && !isLoadingMore) {
						isLoadingMore = true;
						loadingIndicator.classList.remove('d-none');
						currentPage++;
						setTimeout(() => {
							renderCharacters(filter, true);
							isLoadingMore = false;
							loadingIndicator.classList.add('d-none');
							intersectionObserver.unobserve(sentinel);
						}, 100);
					}
				}, {
					root: null,
					rootMargin: '0px',
					threshold: 0.1
				});
				intersectionObserver.observe(sentinel);
			} else {
				loadingIndicator.classList.add('d-none');
				if (filteredCharacters.length > 0) { // Ensure no results message is hidden if results exist
					noResultsMessage.classList.add('d-none');
				}
			}
		}

		let debounceTimer;
		searchInput.addEventListener('input', () => {
			clearTimeout(debounceTimer);
			debounceTimer = setTimeout(() => {
				renderCharacters(searchInput.value);
			}, 300);
		});

		document.querySelectorAll('[data-theme]').forEach(item => {
			item.addEventListener('click', e => {
				const theme = e.target.getAttribute('data-theme');
				if (theme === 'auto') {
					const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
					html.setAttribute('data-bs-theme', prefersDark ? 'dark' : 'light');
					currentThemeLabel.textContent = prefersDark ? 'System (Dark)' : 'System (Light)';
				} else {
					html.setAttribute('data-bs-theme', theme);
					currentThemeLabel.textContent = theme === 'dark' ? 'Dark Theme' : 'Light Theme';
				}
				// Update About button text color based on the new theme
				updateAboutButtonColor();
			});
		});

		function updateAboutButtonColor() {
			const aboutButton = document.querySelector('.sticky-header .btn-link');
			const currentTheme = html.getAttribute('data-bs-theme');
			if (currentTheme === 'dark') {
				aboutButton.style.color = 'rgba(255, 255, 255, 0.75)'; // Bootstrap's default dark text color
			} else {
				aboutButton.style.color = 'rgba(0, 0, 0, 0.75)'; // Bootstrap's default light text color
			}
		}


		function load() {
			for (let code = unicodeStart; code <= unicodeEnd; code++) {
				const char = String.fromCodePoint(code);
				const name = getUnicodeName(code);
				characters.push({
					char,
					code,
					name
				});
			}
			renderCharacters();
			const currentTheme = html.getAttribute('data-bs-theme');
			if (currentTheme === 'auto') {
				const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
				currentThemeLabel.textContent = prefersDark ? 'System Default (Dark)' : 'System Default (Light)';
			} else {
				currentThemeLabel.textContent = currentTheme === 'dark' ? 'Dark Theme' : 'Light Theme';
			}

			// Load API key from local storage on load
			const savedApiKey = localStorage.getItem('gemini.api-key');
			if (savedApiKey) {
				geminiApiKeyInput.value = savedApiKey;
			}
			updateAboutButtonColor(); // Set initial About button color
		}

		const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
		html.setAttribute('data-bs-theme', systemPrefersDark ? 'dark' : 'light');

		load();

		// Removed toastMessage.addEventListener('click') as per new requirements.

		toastLlmButton.addEventListener('click', (event) => {
			event.stopPropagation(); // Prevent click from bubbling to toastMessage if it had a listener
			if (currentToastChar) {
				getCharacterDescription(currentToastChar, currentToastMappedName);
			}
		});

		toastCopyButton.addEventListener('click', () => {
			if (currentToastChar) {
				copyText(currentToastChar, currentToastMappedName, `U+${currentToastChar.charCodeAt(0).toString(16).toUpperCase().padStart(4, '0')}`, currentToastMappedName, false); // Don't show toast again
				toastCopyButton.innerHTML = '<i class="bi bi-clipboard"></i> Copied!';
				setTimeout(() => {
					toastCopyButton.innerHTML = '<i class="bi bi-clipboard"></i> Copy';
				}, 1500);
			}
		});


		// Event listener for the AI Tools link
		aiToolsLink.addEventListener('click', (e) => {
			e.preventDefault(); // Prevent default link behavior
			aiToolsModal.show();
		});

		// Settings Modal Logic
		togglePasswordButton.addEventListener('click', () => {
			const type = geminiApiKeyInput.getAttribute('type') === 'password' ? 'text' : 'password';
			geminiApiKeyInput.setAttribute('type', type);
			// Toggle the eye icon and its title
			const icon = togglePasswordButton.querySelector('i');
			if (type === 'password') {
				icon.classList.remove('bi-eye-slash-fill');
				icon.classList.add('bi-eye-fill');
				togglePasswordButton.title = 'Show password';
			} else {
				icon.classList.remove('bi-eye-fill');
				icon.classList.add('bi-eye-slash-fill');
				togglePasswordButton.title = 'Hide password';
			}
		});

		geminiApiKeyInput.addEventListener('input', () => {
			localStorage.setItem('gemini.api-key', geminiApiKeyInput.value);
		});
	</script>
</body>

</html>
